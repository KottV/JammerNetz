# I looked at https://github.com/microsoft/cpprestsdk/blob/master/azure-pipelines.yml
# But this shows how to do this proper: https://github.com/surge-synthesizer/tuning-workbench-synth/blob/master/azure-pipelines.yml

jobs:
  - job: Build
    strategy:
      matrix:
        mac:
          imageName: 'macos-10.14'
          isMac: True
        win2017:
          imageName: 'vs2017-win2016'
          isWindows2017: True
          isWindows: True
        win2019:
          imageName: 'windows-2019'
          isWindows2019: True
          isWindows: True
        linux:
          imageName: 'ubuntu-18.04'
          isLinux: True
    pool:
      vmImage: $(imageName)
    steps:
    # Disable automatic line ending conversion, which is enabled by default on
    # Azure's Windows image. Having the conversion enabled caused cpplint of SQlite to fail on Windows
    - bash: git config --global core.autocrlf false
      displayName: "Disable git automatic line ending conversion"
    - bash: |
        sudo apt-get update
        sudo apt-get install -y sudo apt-get install -y libcurl4-openssl-dev pkg-config libasound2-dev libgtk-3-dev libwebkit2gtk-4.0-dev libglew-dev libjack-dev
        apt list --installed
      displayName: Prepare Linux Host
      condition: variables.isLinux
    - script: git submodule update --init --recursive
      displayName: Checking out submodules

    # Windows runs CMake tasks
    - task: NuGetCommand@2
      displayName: Installing Innosetup
      inputs:
        command: restore
        restoreSolution: $(System.DefaultWorkingDirectory)/packages.config
        restoreDirectory: third_party
      condition: variables.isWindows
    - task: CmdLine@2
      inputs:
        script: call buildWindows.bat
      displayName: Build with CMake
      condition: variables.isWindows

    - publish: $(System.DefaultWorkingDirectory)/build/Client/jammernetz_setup.exe
      displayName: Publish Windows Installer
      artifact: WindowsInstaller
      condition: variables.isWindows2019

    # Linux uses bash to run CMake directly
    - bash: |
        cd third_party/flatbuffers 
        cmake -S . -B LinuxBuilds
        cmake --build LinuxBuilds
        cd ../.. 
        cmake -S . -B builds 
        cmake --build builds
      displayName: Build with CMake for Linux
      condition: variables.isLinux
      
    # Mac build uses bash as well
    # No need to brew icu4c cmake as they are already present on Azure mac
    - bash: |
        brew install cmake gtk+3 glew
        cd third_party/flatbuffers
        cmake -S . -B LinuxBuilds -G "Unix Makefiles"
        cmake --build LinuxBuilds -- -j8
        cd ../..
        cmake -S . -B Builds/macOS -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
        cmake --build Builds/macOS -- -j8
        VERBOSE=1 cmake --build Builds/macOS --target package -j8        
      displayName: Build with CMake for Mac
      condition: variables.isMac
      
    - publish: $(System.DefaultWorkingDirectory)/builds/release/KnobKraft_Orm-1.11.3-Darwin.dmg
      displayName: Publish Mac Installer
      artifact: MacInstaller
      condition: variables.isMac
        
